{"componentChunkName":"component---src-templates-page-tsx","path":"/wireguard/","result":{"data":{"site":{"siteMetadata":{"title":"Elsa Granger","description":"Elsa Granger Personal Page","author":{"name":"","url":""}}},"markdownRemark":{"html":"<h2>Installation</h2>\n<p>比较新的内核都已经将 WireGuard 打包进了内核，直接安装管理工具即可</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> wireguard</code></pre></div>\n<p>查看是否安装完成</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo modprobe wireguard | lsmod | grep wireguard</code></pre></div>\n<p>在 <code class=\"language-text\">/etc/moduels</code> 后追加 <code class=\"language-text\">wireguard</code> 使得能够自动载入内核模块</p>\n<h2>Config</h2>\n<h3>生成公私钥</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">wg genkey <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> private <span class=\"token operator\">|</span> wg pubkey <span class=\"token operator\">></span> public</code></pre></div>\n<h3>Peer 1</h3>\n<p>这个作为接受外来连接的对等端</p>\n<p>编辑 <code class=\"language-text\">/etc/wireguard/wg0.conf</code>，添加</p>\n<div class=\"gatsby-highlight\" data-language=\"conf\"><pre class=\"language-conf\"><code class=\"language-conf\">[Interface]\nAddress = 10.1.1.1/24 # 对等端的 IP\nListenPort = 48659 # 监听的端口\nPrivateKey = Private Key 1\n\n[Peer] # 发起连接到这个客户端的对端\nPublicKey = Public key 2\nAllowedIPs = 10.1.1.2/32\nPersistentKeepalive = 15</code></pre></div>\n<h3>Peer 2</h3>\n<div class=\"gatsby-highlight\" data-language=\"conf\"><pre class=\"language-conf\"><code class=\"language-conf\">[Interface]\nPrivateKey = Private Key 2\nAddress = 10.1.1.2/24 # 发起连接的客户端的地址\n\n[Peer]\nPublicKey = Public Key 1\nAllowedIPs = 10.1.1.0/24 # 在本地有哪些 IP 地址需要走 wg 的端口出去\nEndpoint = ip1:port\nPersistentKeepalive = 15</code></pre></div>\n<h2>Route</h2>\n<blockquote>\n<p>参考了 <a href=\"https://gobomb.github.io/post/wireguard-notes/\">Wireguard 使用笔记</a></p>\n</blockquote>\n<h3>Forward</h3>\n<p>需要修改 <code class=\"language-text\">/etc/sysctl.conf</code></p>\n<div class=\"gatsby-highlight\" data-language=\"conf\"><pre class=\"language-conf\"><code class=\"language-conf\">net.ipv4.ip_forward = 1</code></pre></div>\n<p>使得允许内核转发</p>\n<h3>iptables</h3>\n<p>现在应该已经可以访问 WireGuard 的内网中的其他设备了，但是无法通过另一个设备将包转发出去</p>\n<p>添加 iptables 的 filter 表中 FORWARD 链的规则，允许来自 wg0 和发往 wg0 的包通过</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">iptables -t filter -A FORWARD -i wg0 -j ACCEPT\niptables -t filter -A FORWARD -o wg0 -j ACCEPT</code></pre></div>\n<p>在这个时候应该可以在外面的设备上收到了请求，但是外面的设备收到的 ip 的源地址是内网地址，\n而其上面不会有到内网地址的路由，因此需要通过 NAT 将源地址修改为出口网卡的出口地址</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">iptables -t nat -A POSTROUTING -s <span class=\"token number\">10.1</span>.1.0/24 -o eth0 -j MASQUERADE</code></pre></div>\n<p>之后就应该可以正常地访问了</p>\n<h2>Config</h2>\n<div class=\"gatsby-highlight\" data-language=\"conf\"><pre class=\"language-conf\"><code class=\"language-conf\">[Interface]\n    Address = 10.3.1.1/24\n    ListenPort = 48659\n    PrivateKey = Pirvate Key 1\n    PostUp = iptables -t filter -A FORWARD -i %i -j ACCEPT; iptables -t filter -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -s 10.3.1.0/24 -o wlan0 -j MASQUERADE\n    PostDown = iptables -t filter -D FORWARD -i %i -j ACCEPT; iptables -t filter -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -s 10.3.1.0/24 -o wlan0 -j MASQUERADE\n[Peer]\n    PublicKey = Public Key 2\n    AllowedIPs = 10.3.1.2/32\n    PersistentKeepalive = 15</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"conf\"><pre class=\"language-conf\"><code class=\"language-conf\">[Interface]\nPrivateKey = Private Key 2\nAddress = 10.3.1.2/24\n\n[Peer]\nPublicKey = Public Key 1\nAllowedIPs = 10.3.1.0/24\nEndpoint = ip:port\nPersistentKeepalive = 15</code></pre></div>","excerpt":"Installation 比较新的内核都已经将 WireGuard 打包进了内核，直接安装管理工具即可 查看是否安装完成 在  后追加  使得能够自动载入内核模块 Config 生成公私钥 Peer 1 这个作为接受外来连接的对等端 编辑 ，添加 Peer 2 Route…","frontmatter":{"title":"WireGuard 配置"}}},"pageContext":{"slug":"/wireguard/"}},"staticQueryHashes":[]}