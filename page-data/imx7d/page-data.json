{"componentChunkName":"component---src-templates-page-tsx","path":"/imx7d/","result":{"data":{"site":{"siteMetadata":{"title":"Elsa Granger","description":"Elsa Granger Personal Page","author":{"name":"","url":""}}},"markdownRemark":{"html":"<h2>GPIO</h2>\n<p>PINOUT 的参考为 <a href=\"https://developer.android.com/things/hardware/imx7d\">I/O Pinouts</a></p>\n<p>GPIO2_IO00 对应的是 sysfs 中的 <code class=\"language-text\">(2-1)*32 + 0</code>，或者 chardev 的 <code class=\"language-text\">/dev/gpiochip1</code> 的 <code class=\"language-text\">line=0</code></p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">echo</span> <span class=\"token number\">32</span> <span class=\"token operator\">></span> /sys/class/gpio/export\n<span class=\"token builtin class-name\">echo</span> out <span class=\"token operator\">></span> /sys/class/gpio/gpio32/direction\n<span class=\"token builtin class-name\">echo</span> <span class=\"token number\">1</span> <span class=\"token operator\">></span> /sys/class/gpio/gpio32/value</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> periphery <span class=\"token keyword\">import</span> GPIO\n<span class=\"token keyword\">import</span> time\n\nr <span class=\"token operator\">=</span> GPIO<span class=\"token punctuation\">(</span><span class=\"token string\">\"/dev/gpiochip1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"out\"</span><span class=\"token punctuation\">)</span>\ng <span class=\"token operator\">=</span> GPIO<span class=\"token punctuation\">(</span><span class=\"token string\">\"/dev/gpiochip1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"out\"</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> GPIO<span class=\"token punctuation\">(</span><span class=\"token string\">\"/dev/gpiochip1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"out\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        r<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        g<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        b<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">>></span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span>\n\nr<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ng<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nb<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>bme280</h2>\n<p>将 i2c 的接口接在 i2c-0 上，使用 <code class=\"language-text\">i2cdetect</code> 得到</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">elsa@imx7d:~$ i2cdetect -y 0\n     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n00:          -- -- -- -- -- -- -- UU -- -- -- -- --\n10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n70: -- -- -- -- -- -- -- 77</code></pre></div>\n<p>说明在 i2c-0 上的 0x77 位置。同样也可以扫 i2c-1 和 i2c-3，但是就没有。</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">elsa@imx7d:~$ i2cdetect -y 1\n     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n00:          -- -- -- -- -- -- -- -- -- -- -- -- --\n10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n70: -- -- -- -- -- -- -- --</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">elsa@imx7d:~$ i2cdetect -y 3\n     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n00:          -- -- -- -- -- UU -- -- -- -- -- -- --\n10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n70: -- -- -- -- -- -- -- --</code></pre></div>\n<p>如果强制全部扫描，那么就是如下的结果</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">elsa@imx7d:~$ i2cdetect -y -a 0\n     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n00: 00 -- -- -- -- -- -- -- -- -- UU -- -- -- -- --\n10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n70: -- -- -- -- -- -- -- 77 -- -- -- -- -- -- -- --\nelsa@imx7d:~$ i2cdetect -y -a 1\n     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n00: 00 -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n70: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\nelsa@imx7d:~$ i2cdetect -y -a 3\n     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n00: 00 -- -- -- -- -- -- -- UU -- -- -- -- -- -- --\n10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n70: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --</code></pre></div>\n<p>没有测试 0x00 能不能用</p>\n<p>得到 i2c 的配置，就可以用 <a href=\"https://github.com/rm-hull/bme280\">RPi.bme280</a> 得到数据，其中结果打印成了 influx line protocol便于被 telegraf 读取。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> smbus2\n<span class=\"token keyword\">import</span> bme280\n\nport <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\naddress <span class=\"token operator\">=</span> <span class=\"token number\">0x77</span>\nbus <span class=\"token operator\">=</span> smbus2<span class=\"token punctuation\">.</span>SMBus<span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span>\n\ncalibration_params <span class=\"token operator\">=</span> bme280<span class=\"token punctuation\">.</span>load_calibration_params<span class=\"token punctuation\">(</span>bus<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">)</span>\ndata <span class=\"token operator\">=</span> bme280<span class=\"token punctuation\">.</span>sample<span class=\"token punctuation\">(</span>bus<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">,</span> calibration_params<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'environment,location=lug206 temperature={},pressure={},humidity={} {}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>\n    data<span class=\"token punctuation\">.</span>temperature<span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">.</span>pressure<span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">.</span>humidity<span class=\"token punctuation\">,</span>\n    <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>timestamp<span class=\"token punctuation\">.</span>timestamp<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>网络</h2>\n<p>用 wpa<em>supplicant 只能 hdcp 到 ipv6 的地址，尝试了 [Arch Wiki 的 wpa</em>supplicant 页面](<a href=\"https://wiki.archlinux.org/index.php/wpa_supplicant#At_boot_(systemd)\">https://wiki.archlinux.org/index.php/wpa_supplicant#At_boot_(systemd)</a>)中提到的几种方法，\n都会有 <code class=\"language-text\">/run/wpa_supplicant/wlan0</code> 和 <code class=\"language-text\">/var/run/wpa_supplicant/wlan0</code> 被占用的情况。不过把整个系统重启安装之后，第一次启动并没有出现这两个文件。\n可能是因为之前的 NetworkManager 遗留的问题，不要安装 NetworkManager 只用 systemd-networkd 应该会正常。不过没有尝试了。</p>\n<p>最后直接用 NetworkManager 来连接，会有设置了静态 IP 之后仍然会有 DHCP 得到的一个 IP 地址的问题。</p>\n<p>同时使用 NetworkManager 也可以直接管理 WireGuard。</p>\n<h2>WireGuard</h2>\n<p>WireGuard 被编译进了内核，就不需要添加内核模块</p>\n<p>参考<a href=\"https://blogs.gnome.org/thaller/2019/03/15/wireguard-in-networkmanager/\">这个文章</a>可以得到如何使用 NetworkManager 来导入 WireGuard 的配置。</p>\n<p>但是直接 <code class=\"language-text\">up</code> 会出错</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">elsa@imx7d:~$ sudo nmcli connection up wg.elsa.imx7d\nError: Connection activation failed: Activation failed because the device is unmanaged\n\nelsa@imx7d:~$ sudo nmcli connection up wg.elsa.imx7d\nError: Connection activation failed: Connection &#39;wg.elsa.imx7d&#39; is not available on device wg.elsa.imx7d because device is strictly unmanaged</code></pre></div>\n<p>用了<a href=\"https://askubuntu.com/a/1075112\">这个回答</a>，强制加载类型为 none 的设备</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">touch</span> /etc/NetworkManager/conf.d/10-globally-managed-devices.conf</code></pre></div>\n<p>重启之后就正常了。</p>\n<p><a href=\"https://jbit.net/NetworkManager_Strictly_Unmanaged/\">这个文章</a>里面提到了一些 NetworkManager 的配置</p>","excerpt":"GPIO PINOUT 的参考为 I/O Pinouts GPIO2_IO00 对应的是 sysfs 中的 ，或者 chardev 的  的  bme280 将 i2c 的接口接在 i2c-0 上，使用  得到 说明在 i2c-0 上的 0x77 位置。同样也可以扫 i2c-…","frontmatter":{"title":"imx7d 一些配置"}}},"pageContext":{"slug":"/imx7d/"}},"staticQueryHashes":[]}